openapi: 3.1.0
info:
 title: Re:Fuel API
 version: v1.0.0
 description: |
  コンプレックスを燃料に変える自己進化アプリ「Re:Fuel」のAPI仕様書です。
  MVP（Minimum Viable Product）の機能を対象としています。

servers:
 - url: http://localhost:8080/api/v1 # 開発環境のベースURL (例)
   description: Development server

components:
 schemas:
  Error:
   type: object
   properties:
    code:
     type: integer
     format: int32
    message:
     type: string
   required:
    - code
    - message

  # --- ここから各エンティティのスキーマを定義していきます ---
  User:
   type: object
   properties:
    id:
     type: string
     format: uuid # 例: ユーザーIDの形式
     description: ユーザーID
    # 他のユーザー情報 (MVPでは最小限)

  Complex:
   type: object
   properties:
    id:
     type: integer
     format: int64
     description: コンプレックスID
    user_id:
     type: string
     format: uuid
     description: ユーザーID
    content:
     type: string
     description: 言語化されたコンプレックスの内容
    category:
     type: string
     description: コンプレックスのカテゴリ
    created_at:
     type: string
     format: date-time
    updated_at:
     type: string
     format: date-time
   required:
    - id
    - user_id
    - content
    - category
    - created_at
    - updated_at

  ComplexInput:
   type: object
   description: 新しいコンプレックスを登録するための入力
   properties:
    content:
     type: string
     description: 言語化されたコンプレックスの内容
     example: "人前で話すのが極度に苦手"
    category:
     type: string
     description: コンプレックスのカテゴリ
     example: "社会性・人間関係"
   required:
    - content
    - category

  # --- GOALS, ACTIONS, BADGES, USER_BADGES のスキーマも同様に追加 ---

 securitySchemes:
  BearerAuth: # MVPでは認証を簡略化するかもしれませんが、将来のために定義
   type: http
   scheme: bearer
   bearerFormat: JWT

paths:
 # --- ここから各エンドポイントを定義していきます ---
 /ping:
  get:
   summary: サーバーの死活監視
   tags:
    - Health
   responses:
    "200":
     description: 成功応答
     content:
      application/json:
       schema:
        type: object
        properties:
         message:
          type: string
          example: pong

 /complexes:
  get:
   summary: 登録されているコンプレックスの一覧を取得
   tags:
    - Complexes
   security:
    - BearerAuth: [] # 認証が必要な場合
   responses:
    "200":
     description: コンプレックス一覧の取得成功
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: "#/components/schemas/Complex"
    "401":
     description: 認証エラー
     content:
      application/json:
       schema:
        $ref: "#/components/schemas/Error"
    "500":
     description: サーバー内部エラー
     content:
      application/json:
       schema:
        $ref: "#/components/schemas/Error"
  post:
   summary: 新しいコンプレックスを登録
   tags:
    - Complexes
   security:
    - BearerAuth: [] # 認証が必要な場合
   requestBody:
    required: true
    content:
     application/json:
      schema:
       $ref: "#/components/schemas/ComplexInput"
   responses:
    "201":
     description: コンプレックスの登録成功
     content:
      application/json:
       schema:
        $ref: "#/components/schemas/Complex"
    "400":
     description: リクエスト不正 (バリデーションエラーなど)
     content:
      application/json:
       schema:
        $ref: "#/components/schemas/Error"
    # 401, 500エラーレスポンスも同様に追加
