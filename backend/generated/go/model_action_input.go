// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Re:Fuel API
 *
 * コンプレックスを燃料に変える自己進化アプリ「Re:Fuel」のAPI仕様書です。 MVP（Minimum Viable Product）の機能を対象としています。 
 *
 * API version: v1.0.0
 */

package refuelapi


import (
	"time"
)



// ActionInput - 新しい行動を記録するための入力
type ActionInput struct {

	// 関連する目標ID
	GoalId int64 `json:"goal_id"`

	// 行動の内容
	Content string `json:"content"`

	// 行動完了日時 (記録時に完了していれば設定)
	CompletedAt time.Time `json:"completed_at"`

	// 行動の繰り返しパターン
	RecurrencePattern RecurrencePattern `json:"recurrence_pattern"`

	// この行動に紐づくGainの入力リスト
	Gains []GainInput `json:"gains"`

	// この行動に紐づくLossの入力リスト
	Losses []LossInput `json:"losses"`
}

// AssertActionInputRequired checks if the required fields are not zero-ed
func AssertActionInputRequired(obj ActionInput) error {
	elements := map[string]interface{}{
		"goal_id": obj.GoalId,
		"content": obj.Content,
		"completed_at": obj.CompletedAt,
		"recurrence_pattern": obj.RecurrencePattern,
		"gains": obj.Gains,
		"losses": obj.Losses,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertRecurrencePatternRequired(obj.RecurrencePattern); err != nil {
		return err
	}
	for _, el := range obj.Gains {
		if err := AssertGainInputRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Losses {
		if err := AssertLossInputRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertActionInputConstraints checks if the values respects the defined constraints
func AssertActionInputConstraints(obj ActionInput) error {
	if err := AssertRecurrencePatternConstraints(obj.RecurrencePattern); err != nil {
		return err
	}
	for _, el := range obj.Gains {
		if err := AssertGainInputConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Losses {
		if err := AssertLossInputConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
