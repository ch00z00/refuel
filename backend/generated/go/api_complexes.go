// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Re:Fuel API
 *
 * コンプレックスを燃料に変える自己進化アプリ「Re:Fuel」のAPI仕様書です。 MVP（Minimum Viable Product）の機能を対象としています。 
 *
 * API version: v1.0.0
 */

package refuelapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ComplexesAPIController binds http requests to an api service and writes the service results to the http response
type ComplexesAPIController struct {
	service ComplexesAPIServicer
	errorHandler ErrorHandler
}

// ComplexesAPIOption for how the controller is set up.
type ComplexesAPIOption func(*ComplexesAPIController)

// WithComplexesAPIErrorHandler inject ErrorHandler into controller
func WithComplexesAPIErrorHandler(h ErrorHandler) ComplexesAPIOption {
	return func(c *ComplexesAPIController) {
		c.errorHandler = h
	}
}

// NewComplexesAPIController creates a default api controller
func NewComplexesAPIController(s ComplexesAPIServicer, opts ...ComplexesAPIOption) *ComplexesAPIController {
	controller := &ComplexesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ComplexesAPIController
func (c *ComplexesAPIController) Routes() Routes {
	return Routes{
		"GetComplexes": Route{
			strings.ToUpper("Get"),
			"/api/v1/complexes",
			c.GetComplexes,
		},
		"CreateComplex": Route{
			strings.ToUpper("Post"),
			"/api/v1/complexes",
			c.CreateComplex,
		},
		"GetComplex": Route{
			strings.ToUpper("Get"),
			"/api/v1/complexes/{complexId}",
			c.GetComplex,
		},
		"UpdateComplex": Route{
			strings.ToUpper("Put"),
			"/api/v1/complexes/{complexId}",
			c.UpdateComplex,
		},
		"DeleteComplex": Route{
			strings.ToUpper("Delete"),
			"/api/v1/complexes/{complexId}",
			c.DeleteComplex,
		},
	}
}

// GetComplexes - 登録されているコンプレックスの一覧を取得
func (c *ComplexesAPIController) GetComplexes(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetComplexes(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateComplex - 新しいコンプレックスを登録
func (c *ComplexesAPIController) CreateComplex(w http.ResponseWriter, r *http.Request) {
	var complexInputParam ComplexInput
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&complexInputParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertComplexInputRequired(complexInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertComplexInputConstraints(complexInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateComplex(r.Context(), complexInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetComplex - 指定されたIDのコンプレックス情報を取得します。
func (c *ComplexesAPIController) GetComplex(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	complexIdParam, err := parseNumericParameter[int64](
		params["complexId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "complexId", Err: err}, nil)
		return
	}
	result, err := c.service.GetComplex(r.Context(), complexIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateComplex - 既存のコンプレックス情報を更新します。
func (c *ComplexesAPIController) UpdateComplex(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	complexIdParam, err := parseNumericParameter[int64](
		params["complexId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "complexId", Err: err}, nil)
		return
	}
	var complexInputParam ComplexInput
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&complexInputParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertComplexInputRequired(complexInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertComplexInputConstraints(complexInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateComplex(r.Context(), complexIdParam, complexInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteComplex - 既存のコンプレックスを削除します。
func (c *ComplexesAPIController) DeleteComplex(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	complexIdParam, err := parseNumericParameter[int64](
		params["complexId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "complexId", Err: err}, nil)
		return
	}
	result, err := c.service.DeleteComplex(r.Context(), complexIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
