// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Re:Fuel API
 *
 * コンプレックスを燃料に変える自己進化アプリ「Re:Fuel」のAPI仕様書です。 MVP（Minimum Viable Product）の機能を対象としています。 
 *
 * API version: v1.0.0
 */

package refuelapi

import (
	"context"
	"net/http"
)



// ActionsAPIRouter defines the required methods for binding the api requests to a responses for the ActionsAPI
// The ActionsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ActionsAPIServicer to perform the required actions, then write the service results to the http response.
type ActionsAPIRouter interface { 
	ActionsGet(http.ResponseWriter, *http.Request)
	ActionsPost(http.ResponseWriter, *http.Request)
	ActionsActionIdPut(http.ResponseWriter, *http.Request)
	ActionsActionIdDelete(http.ResponseWriter, *http.Request)
}
// BadgesAPIRouter defines the required methods for binding the api requests to a responses for the BadgesAPI
// The BadgesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a BadgesAPIServicer to perform the required actions, then write the service results to the http response.
type BadgesAPIRouter interface { 
	BadgesGet(http.ResponseWriter, *http.Request)
}
// ComplexesAPIRouter defines the required methods for binding the api requests to a responses for the ComplexesAPI
// The ComplexesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ComplexesAPIServicer to perform the required actions, then write the service results to the http response.
type ComplexesAPIRouter interface { 
	ComplexesGet(http.ResponseWriter, *http.Request)
	ComplexesPost(http.ResponseWriter, *http.Request)
	ComplexesComplexIdGet(http.ResponseWriter, *http.Request)
	ComplexesComplexIdPut(http.ResponseWriter, *http.Request)
	ComplexesComplexIdDelete(http.ResponseWriter, *http.Request)
}
// GoalsAPIRouter defines the required methods for binding the api requests to a responses for the GoalsAPI
// The GoalsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a GoalsAPIServicer to perform the required actions, then write the service results to the http response.
type GoalsAPIRouter interface { 
	GoalsGet(http.ResponseWriter, *http.Request)
	GoalsPost(http.ResponseWriter, *http.Request)
	GoalsGoalIdGet(http.ResponseWriter, *http.Request)
	GoalsGoalIdPut(http.ResponseWriter, *http.Request)
	GoalsGoalIdDelete(http.ResponseWriter, *http.Request)
}
// HealthAPIRouter defines the required methods for binding the api requests to a responses for the HealthAPI
// The HealthAPIRouter implementation should parse necessary information from the http request,
// pass the data to a HealthAPIServicer to perform the required actions, then write the service results to the http response.
type HealthAPIRouter interface { 
	PingGet(http.ResponseWriter, *http.Request)
}
// UserBadgesAPIRouter defines the required methods for binding the api requests to a responses for the UserBadgesAPI
// The UserBadgesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a UserBadgesAPIServicer to perform the required actions, then write the service results to the http response.
type UserBadgesAPIRouter interface { 
	MeBadgesGet(http.ResponseWriter, *http.Request)
}


// ActionsAPIServicer defines the api actions for the ActionsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ActionsAPIServicer interface { 
	ActionsGet(context.Context, int64) (ImplResponse, error)
	ActionsPost(context.Context, ActionInput) (ImplResponse, error)
	ActionsActionIdPut(context.Context, int64, ActionUpdateInput) (ImplResponse, error)
	ActionsActionIdDelete(context.Context, int64) (ImplResponse, error)
}


// BadgesAPIServicer defines the api actions for the BadgesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type BadgesAPIServicer interface { 
	BadgesGet(context.Context) (ImplResponse, error)
}


// ComplexesAPIServicer defines the api actions for the ComplexesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ComplexesAPIServicer interface { 
	ComplexesGet(context.Context) (ImplResponse, error)
	ComplexesPost(context.Context, ComplexInput) (ImplResponse, error)
	ComplexesComplexIdGet(context.Context, int64) (ImplResponse, error)
	ComplexesComplexIdPut(context.Context, int64, ComplexInput) (ImplResponse, error)
	ComplexesComplexIdDelete(context.Context, int64) (ImplResponse, error)
}


// GoalsAPIServicer defines the api actions for the GoalsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type GoalsAPIServicer interface { 
	GoalsGet(context.Context) (ImplResponse, error)
	GoalsPost(context.Context, GoalInput) (ImplResponse, error)
	GoalsGoalIdGet(context.Context, int64) (ImplResponse, error)
	GoalsGoalIdPut(context.Context, int64, GoalInput) (ImplResponse, error)
	GoalsGoalIdDelete(context.Context, int64) (ImplResponse, error)
}


// HealthAPIServicer defines the api actions for the HealthAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type HealthAPIServicer interface { 
	PingGet(context.Context) (ImplResponse, error)
}


// UserBadgesAPIServicer defines the api actions for the UserBadgesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type UserBadgesAPIServicer interface { 
	MeBadgesGet(context.Context) (ImplResponse, error)
}
