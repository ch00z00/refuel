// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Re:Fuel API
 *
 * コンプレックスを燃料に変える自己進化アプリ「Re:Fuel」のAPI仕様書です。 MVP（Minimum Viable Product）の機能を対象としています。 
 *
 * API version: v1.0.0
 */

package refuelapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// GoalsAPIController binds http requests to an api service and writes the service results to the http response
type GoalsAPIController struct {
	service GoalsAPIServicer
	errorHandler ErrorHandler
}

// GoalsAPIOption for how the controller is set up.
type GoalsAPIOption func(*GoalsAPIController)

// WithGoalsAPIErrorHandler inject ErrorHandler into controller
func WithGoalsAPIErrorHandler(h ErrorHandler) GoalsAPIOption {
	return func(c *GoalsAPIController) {
		c.errorHandler = h
	}
}

// NewGoalsAPIController creates a default api controller
func NewGoalsAPIController(s GoalsAPIServicer, opts ...GoalsAPIOption) *GoalsAPIController {
	controller := &GoalsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the GoalsAPIController
func (c *GoalsAPIController) Routes() Routes {
	return Routes{
		"GetGoals": Route{
			strings.ToUpper("Get"),
			"/api/v1/goals",
			c.GetGoals,
		},
		"CreateGoal": Route{
			strings.ToUpper("Post"),
			"/api/v1/goals",
			c.CreateGoal,
		},
		"GetGoal": Route{
			strings.ToUpper("Get"),
			"/api/v1/goals/{goalId}",
			c.GetGoal,
		},
		"UpdateGoal": Route{
			strings.ToUpper("Put"),
			"/api/v1/goals/{goalId}",
			c.UpdateGoal,
		},
		"DeleteGoal": Route{
			strings.ToUpper("Delete"),
			"/api/v1/goals/{goalId}",
			c.DeleteGoal,
		},
	}
}

// GetGoals - 登録されている目標の一覧を取得
func (c *GoalsAPIController) GetGoals(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetGoals(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateGoal - 新しい目標を登録
func (c *GoalsAPIController) CreateGoal(w http.ResponseWriter, r *http.Request) {
	var goalInputParam GoalInput
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&goalInputParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGoalInputRequired(goalInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGoalInputConstraints(goalInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateGoal(r.Context(), goalInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetGoal - 指定されたIDの目標情報を取得
func (c *GoalsAPIController) GetGoal(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	goalIdParam, err := parseNumericParameter[int64](
		params["goalId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "goalId", Err: err}, nil)
		return
	}
	result, err := c.service.GetGoal(r.Context(), goalIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateGoal - 既存の目標情報を更新
func (c *GoalsAPIController) UpdateGoal(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	goalIdParam, err := parseNumericParameter[int64](
		params["goalId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "goalId", Err: err}, nil)
		return
	}
	var goalInputParam GoalInput
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&goalInputParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGoalInputRequired(goalInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGoalInputConstraints(goalInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateGoal(r.Context(), goalIdParam, goalInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteGoal - 既存の目標を削除
func (c *GoalsAPIController) DeleteGoal(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	goalIdParam, err := parseNumericParameter[int64](
		params["goalId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "goalId", Err: err}, nil)
		return
	}
	result, err := c.service.DeleteGoal(r.Context(), goalIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
