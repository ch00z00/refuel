// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Re:Fuel API
 *
 * コンプレックスを燃料に変える自己進化アプリ「Re:Fuel」のAPI仕様書です。 MVP（Minimum Viable Product）の機能を対象としています。 
 *
 * API version: v1.0.0
 */

package refuelapi


import (
	"time"
)



type Action struct {

	// 行動ID
	Id int64 `json:"id"`

	// ユーザーID
	UserId string `json:"user_id"`

	// 関連する目標ID
	GoalId int64 `json:"goal_id"`

	// 行動の内容
	Content string `json:"content"`

	// 行動完了日時 (未完了の場合はnull)
	CompletedAt time.Time `json:"completed_at"`

	// 行動の繰り返しパターン
	RecurrencePattern RecurrencePattern `json:"recurrence_pattern"`

	// この行動に紐づくGainのリスト
	Gains []Gain `json:"gains"`

	// この行動に紐づくLossのリスト
	Losses []Loss `json:"losses"`

	CreatedAt time.Time `json:"created_at"`

	UpdatedAt time.Time `json:"updated_at"`
}

// AssertActionRequired checks if the required fields are not zero-ed
func AssertActionRequired(obj Action) error {
	elements := map[string]interface{}{
		"id": obj.Id,
		"user_id": obj.UserId,
		"goal_id": obj.GoalId,
		"content": obj.Content,
		"completed_at": obj.CompletedAt,
		"recurrence_pattern": obj.RecurrencePattern,
		"gains": obj.Gains,
		"losses": obj.Losses,
		"created_at": obj.CreatedAt,
		"updated_at": obj.UpdatedAt,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertRecurrencePatternRequired(obj.RecurrencePattern); err != nil {
		return err
	}
	for _, el := range obj.Gains {
		if err := AssertGainRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Losses {
		if err := AssertLossRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertActionConstraints checks if the values respects the defined constraints
func AssertActionConstraints(obj Action) error {
	if err := AssertRecurrencePatternConstraints(obj.RecurrencePattern); err != nil {
		return err
	}
	for _, el := range obj.Gains {
		if err := AssertGainConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Losses {
		if err := AssertLossConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
