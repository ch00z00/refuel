// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Re:Fuel API
 *
 * コンプレックスを燃料に変える自己進化アプリ「Re:Fuel」のAPI仕様書です。 MVP（Minimum Viable Product）の機能を対象としています。 
 *
 * API version: v1.0.0
 */

package refuelapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ActionsAPIController binds http requests to an api service and writes the service results to the http response
type ActionsAPIController struct {
	service ActionsAPIServicer
	errorHandler ErrorHandler
}

// ActionsAPIOption for how the controller is set up.
type ActionsAPIOption func(*ActionsAPIController)

// WithActionsAPIErrorHandler inject ErrorHandler into controller
func WithActionsAPIErrorHandler(h ErrorHandler) ActionsAPIOption {
	return func(c *ActionsAPIController) {
		c.errorHandler = h
	}
}

// NewActionsAPIController creates a default api controller
func NewActionsAPIController(s ActionsAPIServicer, opts ...ActionsAPIOption) *ActionsAPIController {
	controller := &ActionsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ActionsAPIController
func (c *ActionsAPIController) Routes() Routes {
	return Routes{
		"ActionsGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/actions",
			c.ActionsGet,
		},
		"ActionsPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/actions",
			c.ActionsPost,
		},
		"ActionsActionIdPut": Route{
			strings.ToUpper("Put"),
			"/api/v1/actions/{actionId}",
			c.ActionsActionIdPut,
		},
		"ActionsActionIdDelete": Route{
			strings.ToUpper("Delete"),
			"/api/v1/actions/{actionId}",
			c.ActionsActionIdDelete,
		},
	}
}

// ActionsGet - 指定された目標IDに紐づく行動の一覧を取得
func (c *ActionsAPIController) ActionsGet(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var goalIdParam int64
	if query.Has("goal_id") {
		param, err := parseNumericParameter[int64](
			query.Get("goal_id"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "goal_id", Err: err}, nil)
			return
		}

		goalIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "goal_id"}, nil)
		return
	}
	result, err := c.service.ActionsGet(r.Context(), goalIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ActionsPost - 新しい行動を記録
func (c *ActionsAPIController) ActionsPost(w http.ResponseWriter, r *http.Request) {
	var actionInputParam ActionInput
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&actionInputParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertActionInputRequired(actionInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertActionInputConstraints(actionInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ActionsPost(r.Context(), actionInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ActionsActionIdPut - 既存の行動情報を更新
func (c *ActionsAPIController) ActionsActionIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	actionIdParam, err := parseNumericParameter[int64](
		params["actionId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "actionId", Err: err}, nil)
		return
	}
	var actionUpdateInputParam ActionUpdateInput
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&actionUpdateInputParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertActionUpdateInputRequired(actionUpdateInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertActionUpdateInputConstraints(actionUpdateInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ActionsActionIdPut(r.Context(), actionIdParam, actionUpdateInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ActionsActionIdDelete - 既存の行動を削除
func (c *ActionsAPIController) ActionsActionIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	actionIdParam, err := parseNumericParameter[int64](
		params["actionId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "actionId", Err: err}, nil)
		return
	}
	result, err := c.service.ActionsActionIdDelete(r.Context(), actionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
