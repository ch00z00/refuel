// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Re:Fuel API
 *
 * This is the API specification document for Re:Fuel, an application for
 * converting complexes into fuel for self-evolution.
 * It targets the MVP (Minimum Viable Product) features.
 *
 * API version: v1.0.0
 */

package main

import (
	"log"
	"net/http"

	"refuel/backend/app"
	refuelapi "refuel/backend/generated/go"

	"github.com/gin-gonic/gin"
)

func main() {
	log.Printf("Server started")

	// 1. Initialize Gin router
	ginRouter := gin.Default()

	// 2. Setup application context (DB connection, validator, etc.)
	appCtx, err := app.SetupApp()
	if err != nil {
		log.Fatalf("Failed to setup application: %v", err)
	}

	// 3. Instantiate API service with business logic
	apiService := app.NewAPIService(appCtx.DB, appCtx.Validate)

	// 4. Pass API service to generated controller and register to router
	router := refuelapi.NewRouter(
		refuelapi.NewActionsAPIController(apiService.(refuelapi.ActionsAPIServicer)),
		refuelapi.NewBadgesAPIController(apiService.(refuelapi.BadgesAPIServicer)),
		refuelapi.NewComplexesAPIController(apiService.(refuelapi.ComplexesAPIServicer)),
		refuelapi.NewGoalsAPIController(apiService.(refuelapi.GoalsAPIServicer)),
		refuelapi.NewHealthAPIController(apiService.(refuelapi.HealthAPIServicer)),
		refuelapi.NewUserBadgesAPIController(apiService.(refuelapi.UserBadgesAPIServicer)),
	)

	// 5. Setup Gin middleware (CORS, Auth, etc.)
	app.SetupGinMiddlewares(ginRouter)

	// 6. Register generated router handler to Gin router
	//    openapi-generator generated router implements http.Handler interface
	ginRouter.Any("/*any", gin.WrapH(router))

	// 7. Start server
	log.Fatal(http.ListenAndServe(":8080", ginRouter))
}
